{
    "kind": "AdmissionReview",
    "apiVersion": "admission.k8s.io/v1",
    "request": {
        "uid": "2a2ea5bf-2119-4eb0-a890-500714b8f3a5",
        "kind": {
            "group": "tekton.dev",
            "version": "v1",
            "kind": "PipelineRun"
        },
        "resource": {
            "group": "tekton.dev",
            "version": "v1",
            "resource": "pipelineruns"
        },
        "requestKind": {
            "group": "tekton.dev",
            "version": "v1beta1",
            "kind": "PipelineRun"
        },
        "requestResource": {
            "group": "tekton.dev",
            "version": "v1beta1",
            "resource": "pipelineruns"
        },
        "name": "ilkdeneme-d5aba",
        "namespace": "mutatemate-test",
        "operation": "CREATE",
        "userInfo": {
            "username": "system:serviceaccount:mutatemate-test:ds-pipeline-pipelines-definition",
            "uid": "44a74b8b-cd0f-496c-9443-23b63acfdeed",
            "groups": [
                "system:serviceaccounts",
                "system:serviceaccounts:mutatemate-test",
                "system:authenticated"
            ],
            "extra": {
                "authentication.kubernetes.io/pod-name": [
                    "ds-pipeline-pipelines-definition-786bc7d78f-t85qn"
                ],
                "authentication.kubernetes.io/pod-uid": [
                    "23dedad2-2ca7-4a19-a202-e59b5978e061"
                ]
            }
        },
        "object": {
            "apiVersion": "tekton.dev/v1",
            "kind": "PipelineRun",
            "metadata": {
                "annotations": {
                    "pipelines.kubeflow.org/big_data_passing_format": "$(workspaces.$TASK_NAME.path)/artifacts/ilkdeneme-d5aba/$TASKRUN_NAME/$TASK_PARAM_NAME",
                    "pipelines.kubeflow.org/pipeline_spec": "{\"name\": \"ilkdeneme\"}",
                    "pipelines.kubeflow.org/run_name": "ilkdeneme-0403063248",
                    "sidecar.istio.io/inject": "false",
                    "tekton.dev/artifact_bucket": "thy-workshop-pipelines",
                    "tekton.dev/artifact_endpoint": "http://minio-service.mutatemate-test.svc.cluster.local:9000",
                    "tekton.dev/artifact_endpoint_scheme": "http://",
                    "tekton.dev/artifact_items": "{\"run-a-file\": [[\"mlpipeline-metrics\", \"/tmp/mlpipeline-metrics.json\"], [\"mlpipeline-ui-metadata\", \"/tmp/mlpipeline-ui-metadata.json\"]], \"run-a-file-2\": [[\"mlpipeline-metrics\", \"/tmp/mlpipeline-metrics.json\"], [\"mlpipeline-ui-metadata\", \"/tmp/mlpipeline-ui-metadata.json\"]], \"run-a-file-3\": [[\"mlpipeline-metrics\", \"/tmp/mlpipeline-metrics.json\"], [\"mlpipeline-ui-metadata\", \"/tmp/mlpipeline-ui-metadata.json\"]]}",
                    "tekton.dev/input_artifacts": "{}",
                    "tekton.dev/output_artifacts": "{\"run-a-file\": [{\"key\": \"artifacts/$PIPELINERUN/run-a-file/mlpipeline-metrics.tgz\", \"name\": \"mlpipeline-metrics\", \"path\": \"/tmp/mlpipeline-metrics.json\"}, {\"key\": \"artifacts/$PIPELINERUN/run-a-file/mlpipeline-ui-metadata.tgz\", \"name\": \"mlpipeline-ui-metadata\", \"path\": \"/tmp/mlpipeline-ui-metadata.json\"}], \"run-a-file-2\": [{\"key\": \"artifacts/$PIPELINERUN/run-a-file-2/mlpipeline-metrics.tgz\", \"name\": \"mlpipeline-metrics\", \"path\": \"/tmp/mlpipeline-metrics.json\"}, {\"key\": \"artifacts/$PIPELINERUN/run-a-file-2/mlpipeline-ui-metadata.tgz\", \"name\": \"mlpipeline-ui-metadata\", \"path\": \"/tmp/mlpipeline-ui-metadata.json\"}], \"run-a-file-3\": [{\"key\": \"artifacts/$PIPELINERUN/run-a-file-3/mlpipeline-metrics.tgz\", \"name\": \"mlpipeline-metrics\", \"path\": \"/tmp/mlpipeline-metrics.json\"}, {\"key\": \"artifacts/$PIPELINERUN/run-a-file-3/mlpipeline-ui-metadata.tgz\", \"name\": \"mlpipeline-ui-metadata\", \"path\": \"/tmp/mlpipeline-ui-metadata.json\"}]}",
                    "tekton.dev/template": ""
                },
                "labels": {
                    "custom.tekton.dev/originalPipelineRun": "ilkdeneme-d5aba",
                    "pipeline/runid": "d5aba94a-8331-4ffa-8f71-42d889277bf8",
                    "pipelines.kubeflow.org/generation": "",
                    "pipelines.kubeflow.org/pipelinename": ""
                },
                "managedFields": [
                    {
                        "apiVersion": "tekton.dev/v1beta1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:pipelines.kubeflow.org/big_data_passing_format": {},
                                    "f:pipelines.kubeflow.org/pipeline_spec": {},
                                    "f:pipelines.kubeflow.org/run_name": {},
                                    "f:sidecar.istio.io/inject": {},
                                    "f:tekton.dev/artifact_bucket": {},
                                    "f:tekton.dev/artifact_endpoint": {},
                                    "f:tekton.dev/artifact_endpoint_scheme": {},
                                    "f:tekton.dev/artifact_items": {},
                                    "f:tekton.dev/input_artifacts": {},
                                    "f:tekton.dev/output_artifacts": {},
                                    "f:tekton.dev/template": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:custom.tekton.dev/originalPipelineRun": {},
                                    "f:pipeline/runid": {},
                                    "f:pipelines.kubeflow.org/generation": {},
                                    "f:pipelines.kubeflow.org/pipelinename": {}
                                }
                            },
                            "f:spec": {
                                ".": {},
                                "f:pipelineSpec": {
                                    ".": {},
                                    "f:tasks": {}
                                },
                                "f:serviceAccountName": {}
                            }
                        },
                        "manager": "apiserver",
                        "operation": "Update",
                        "time": "2024-04-03T06:32:49Z"
                    }
                ],
                "name": "ilkdeneme-d5aba",
                "namespace": "mutatemate-test"
            },
            "spec": {
                "pipelineSpec": {
                    "tasks": [
                        {
                            "name": "run-a-file",
                            "taskSpec": {
                                "metadata": {
                                    "annotations": {
                                        "elyra/node-file-name": "1.ipynb",
                                        "elyra/pipeline-source": "ilkdeneme.pipeline",
                                        "pipelines.kubeflow.org/component_spec_digest": "{\"name\": \"Run a file\", \"outputs\": [], \"version\": \"Run a file@sha256=5736ce44c78133a464d4278f31315dbd636d4e8bcec6d6085ef908ab0f00d597\"}",
                                        "pipelines.kubeflow.org/task_display_name": "1"
                                    },
                                    "labels": {
                                        "elyra/experiment-name": "",
                                        "elyra/node-name": "1",
                                        "elyra/node-type": "notebook-script",
                                        "elyra/pipeline-name": "ilkdeneme",
                                        "elyra/pipeline-version": "",
                                        "pipelines.kubeflow.org/cache_enabled": "true"
                                    }
                                },
                                "spec": null,
                                "stepTemplate": {
                                    "computeResources": {},
                                    "volumeMounts": [
                                        {
                                            "mountPath": "/tmp",
                                            "name": "mlpipeline-metrics"
                                        }
                                    ]
                                },
                                "steps": [
                                    {
                                        "args": [
                                            "sh -c \"mkdir -p ./jupyter-work-dir && cd ./jupyter-work-dir\"\nsh -c \"echo 'Downloading file:///opt/app-root/bin/utils/bootstrapper.py' && curl --fail -H 'Cache-Control: no-cache' -L file:///opt/app-root/bin/utils/bootstrapper.py --output bootstrapper.py\"\nsh -c \"echo 'Downloading file:///opt/app-root/bin/utils/requirements-elyra.txt' && curl --fail -H 'Cache-Control: no-cache' -L file:///opt/app-root/bin/utils/requirements-elyra.txt --output requirements-elyra.txt\"\nsh -c \"python3 -m pip install  packaging && python3 -m pip freeze > requirements-current.txt && python3 bootstrapper.py --pipeline-name 'ilkdeneme' --cos-endpoint 'http://minio-service:9000' --cos-bucket 'thy-workshop-pipelines' --cos-directory 'ilkdeneme-0403063248' --cos-dependencies-archive '1-c69a7ae1-6e57-41d5-989a-8faa747e6540.tar.gz' --file '1.ipynb' \"\n"
                                        ],
                                        "command": [
                                            "sh",
                                            "-c"
                                        ],
                                        "computeResources": {},
                                        "env": [
                                            {
                                                "name": "AWS_ACCESS_KEY_ID",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "AWS_ACCESS_KEY_ID",
                                                        "name": "aws-connection-pipelines"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "AWS_SECRET_ACCESS_KEY",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "AWS_SECRET_ACCESS_KEY",
                                                        "name": "aws-connection-pipelines"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ELYRA_RUNTIME_ENV",
                                                "value": "kfp"
                                            },
                                            {
                                                "name": "ELYRA_ENABLE_PIPELINE_INFO",
                                                "value": "True"
                                            },
                                            {
                                                "name": "ELYRA_WRITABLE_CONTAINER_DIR",
                                                "value": "/tmp"
                                            },
                                            {
                                                "name": "ELYRA_RUN_NAME",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['pipelines.kubeflow.org/run_name']"
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "quay.io/modh/runtime-images@sha256:e0d97147aa6ea050cea12b9759faf4c0e537b043b652cab4ffddc5c2caac23cc",
                                        "imagePullPolicy": "IfNotPresent",
                                        "name": "main"
                                    },
                                    {
                                        "args": [
                                            "#!/usr/bin/env sh\npush_artifact() {\n    workspace_dir=$(echo $(context.taskRun.name) | sed -e \"s/$(context.pipeline.name)-//g\")\n    workspace_dest=/workspace/${workspace_dir}/artifacts/$(context.pipelineRun.name)/$(context.taskRun.name)\n    artifact_name=$(basename $2)\n\n    aws_cp() {\n\n      aws s3 --endpoint http://minio-service.mutatemate-test.svc.cluster.local:9000 --ca-bundle /dsp-custom-certs/dsp-ca.crt cp $1.tgz s3://thy-workshop-pipelines/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\n\n    }\n\n    if [ -f \"$workspace_dest/$artifact_name\" ]; then\n        echo sending to: ${workspace_dest}/${artifact_name}\n        tar -cvzf $1.tgz -C ${workspace_dest} ${artifact_name}\n        aws_cp $1\n    elif [ -f \"$2\" ]; then\n        tar -cvzf $1.tgz -C $(dirname $2) ${artifact_name}\n        aws_cp $1\n    else\n        echo \"$2 file does not exist. Skip artifact tracking for $1\"\n    fi\n}\npush_log() {\n    cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log > step-main.log\n    push_artifact main-log step-main.log\n}\nstrip_eof() {\n    if [ -f \"$2\" ]; then\n        awk 'NF' $2 | head -c -1 > $1_temp_save && cp $1_temp_save $2\n    fi\n}\npush_artifact \"mlpipeline-metrics\" \"/tmp/mlpipeline-metrics.json\"\npush_artifact \"mlpipeline-ui-metadata\" \"/tmp/mlpipeline-ui-metadata.json\"\nstrip_eof mlpipeline-metrics /tmp/mlpipeline-metrics.json\nstrip_eof mlpipeline-ui-metadata /tmp/mlpipeline-ui-metadata.json\n"
                                        ],
                                        "command": [
                                            "sh",
                                            "-c"
                                        ],
                                        "computeResources": {},
                                        "env": [
                                            {
                                                "name": "ARTIFACT_BUCKET",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['tekton.dev/artifact_bucket']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARTIFACT_ENDPOINT",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['tekton.dev/artifact_endpoint']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARTIFACT_ENDPOINT_SCHEME",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['tekton.dev/artifact_endpoint_scheme']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARTIFACT_ITEMS",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['tekton.dev/artifact_items']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "PIPELINETASK",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "PIPELINERUN",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "PODNAME",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.name"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "AWS_ACCESS_KEY_ID",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "accesskey",
                                                        "name": "mlpipeline-minio-artifact"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "AWS_SECRET_ACCESS_KEY",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "secretkey",
                                                        "name": "mlpipeline-minio-artifact"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARCHIVE_LOGS",
                                                "value": "false"
                                            },
                                            {
                                                "name": "TRACK_ARTIFACTS",
                                                "value": "true"
                                            },
                                            {
                                                "name": "STRIP_EOF",
                                                "value": "true"
                                            }
                                        ],
                                        "image": "registry.redhat.io/rhoai/odh-ml-pipelines-artifact-manager-rhel8@sha256:a2bbccc967113670b7b5f62c4b60c583a9cedd0750fde1e14a06e271aa987ede",
                                        "name": "copy-artifacts",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/dsp-custom-certs/dsp-ca.crt",
                                                "name": "custom-ca-bundle",
                                                "subPath": "dsp-ca.crt"
                                            }
                                        ]
                                    }
                                ],
                                "volumes": [
                                    {
                                        "emptyDir": {},
                                        "name": "mlpipeline-metrics"
                                    },
                                    {
                                        "configMap": {
                                            "name": "dsp-trusted-ca-pipelines-definition"
                                        },
                                        "name": "custom-ca-bundle"
                                    }
                                ]
                            }
                        },
                        {
                            "name": "run-a-file-2",
                            "runAfter": [
                                "run-a-file"
                            ],
                            "taskSpec": {
                                "metadata": {
                                    "annotations": {
                                        "elyra/node-file-name": "2.ipynb",
                                        "elyra/pipeline-source": "ilkdeneme.pipeline",
                                        "pipelines.kubeflow.org/component_spec_digest": "{\"name\": \"Run a file\", \"outputs\": [], \"version\": \"Run a file@sha256=7ae567857f4b9462209377e614e2e7236b6857b6df9d74ebe9426745cc2b344d\"}",
                                        "pipelines.kubeflow.org/task_display_name": "2"
                                    },
                                    "labels": {
                                        "elyra/experiment-name": "",
                                        "elyra/node-name": "2",
                                        "elyra/node-type": "notebook-script",
                                        "elyra/pipeline-name": "ilkdeneme",
                                        "elyra/pipeline-version": "",
                                        "pipelines.kubeflow.org/cache_enabled": "true"
                                    }
                                },
                                "spec": null,
                                "stepTemplate": {
                                    "computeResources": {},
                                    "volumeMounts": [
                                        {
                                            "mountPath": "/tmp",
                                            "name": "mlpipeline-metrics"
                                        }
                                    ]
                                },
                                "steps": [
                                    {
                                        "args": [
                                            "sh -c \"mkdir -p ./jupyter-work-dir && cd ./jupyter-work-dir\"\nsh -c \"echo 'Downloading file:///opt/app-root/bin/utils/bootstrapper.py' && curl --fail -H 'Cache-Control: no-cache' -L file:///opt/app-root/bin/utils/bootstrapper.py --output bootstrapper.py\"\nsh -c \"echo 'Downloading file:///opt/app-root/bin/utils/requirements-elyra.txt' && curl --fail -H 'Cache-Control: no-cache' -L file:///opt/app-root/bin/utils/requirements-elyra.txt --output requirements-elyra.txt\"\nsh -c \"python3 -m pip install  packaging && python3 -m pip freeze > requirements-current.txt && python3 bootstrapper.py --pipeline-name 'ilkdeneme' --cos-endpoint 'http://minio-service:9000' --cos-bucket 'thy-workshop-pipelines' --cos-directory 'ilkdeneme-0403063248' --cos-dependencies-archive '2-960e6f66-be9d-46fa-9d22-cb174c0930de.tar.gz' --file '2.ipynb' \"\n"
                                        ],
                                        "command": [
                                            "sh",
                                            "-c"
                                        ],
                                        "computeResources": {},
                                        "env": [
                                            {
                                                "name": "AWS_ACCESS_KEY_ID",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "AWS_ACCESS_KEY_ID",
                                                        "name": "aws-connection-pipelines"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "AWS_SECRET_ACCESS_KEY",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "AWS_SECRET_ACCESS_KEY",
                                                        "name": "aws-connection-pipelines"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ELYRA_RUNTIME_ENV",
                                                "value": "kfp"
                                            },
                                            {
                                                "name": "ELYRA_ENABLE_PIPELINE_INFO",
                                                "value": "True"
                                            },
                                            {
                                                "name": "ELYRA_WRITABLE_CONTAINER_DIR",
                                                "value": "/tmp"
                                            },
                                            {
                                                "name": "ELYRA_RUN_NAME",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['pipelines.kubeflow.org/run_name']"
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "quay.io/modh/runtime-images@sha256:e0d97147aa6ea050cea12b9759faf4c0e537b043b652cab4ffddc5c2caac23cc",
                                        "imagePullPolicy": "IfNotPresent",
                                        "name": "main"
                                    },
                                    {
                                        "args": [
                                            "#!/usr/bin/env sh\npush_artifact() {\n    workspace_dir=$(echo $(context.taskRun.name) | sed -e \"s/$(context.pipeline.name)-//g\")\n    workspace_dest=/workspace/${workspace_dir}/artifacts/$(context.pipelineRun.name)/$(context.taskRun.name)\n    artifact_name=$(basename $2)\n\n    aws_cp() {\n\n      aws s3 --endpoint http://minio-service.mutatemate-test.svc.cluster.local:9000 --ca-bundle /dsp-custom-certs/dsp-ca.crt cp $1.tgz s3://thy-workshop-pipelines/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\n\n    }\n\n    if [ -f \"$workspace_dest/$artifact_name\" ]; then\n        echo sending to: ${workspace_dest}/${artifact_name}\n        tar -cvzf $1.tgz -C ${workspace_dest} ${artifact_name}\n        aws_cp $1\n    elif [ -f \"$2\" ]; then\n        tar -cvzf $1.tgz -C $(dirname $2) ${artifact_name}\n        aws_cp $1\n    else\n        echo \"$2 file does not exist. Skip artifact tracking for $1\"\n    fi\n}\npush_log() {\n    cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log > step-main.log\n    push_artifact main-log step-main.log\n}\nstrip_eof() {\n    if [ -f \"$2\" ]; then\n        awk 'NF' $2 | head -c -1 > $1_temp_save && cp $1_temp_save $2\n    fi\n}\npush_artifact \"mlpipeline-metrics\" \"/tmp/mlpipeline-metrics.json\"\npush_artifact \"mlpipeline-ui-metadata\" \"/tmp/mlpipeline-ui-metadata.json\"\nstrip_eof mlpipeline-metrics /tmp/mlpipeline-metrics.json\nstrip_eof mlpipeline-ui-metadata /tmp/mlpipeline-ui-metadata.json\n"
                                        ],
                                        "command": [
                                            "sh",
                                            "-c"
                                        ],
                                        "computeResources": {},
                                        "env": [
                                            {
                                                "name": "ARTIFACT_BUCKET",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['tekton.dev/artifact_bucket']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARTIFACT_ENDPOINT",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['tekton.dev/artifact_endpoint']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARTIFACT_ENDPOINT_SCHEME",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['tekton.dev/artifact_endpoint_scheme']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARTIFACT_ITEMS",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['tekton.dev/artifact_items']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "PIPELINETASK",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "PIPELINERUN",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "PODNAME",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.name"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "AWS_ACCESS_KEY_ID",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "accesskey",
                                                        "name": "mlpipeline-minio-artifact"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "AWS_SECRET_ACCESS_KEY",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "secretkey",
                                                        "name": "mlpipeline-minio-artifact"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARCHIVE_LOGS",
                                                "value": "false"
                                            },
                                            {
                                                "name": "TRACK_ARTIFACTS",
                                                "value": "true"
                                            },
                                            {
                                                "name": "STRIP_EOF",
                                                "value": "true"
                                            }
                                        ],
                                        "image": "registry.redhat.io/rhoai/odh-ml-pipelines-artifact-manager-rhel8@sha256:a2bbccc967113670b7b5f62c4b60c583a9cedd0750fde1e14a06e271aa987ede",
                                        "name": "copy-artifacts",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/dsp-custom-certs/dsp-ca.crt",
                                                "name": "custom-ca-bundle",
                                                "subPath": "dsp-ca.crt"
                                            }
                                        ]
                                    }
                                ],
                                "volumes": [
                                    {
                                        "emptyDir": {},
                                        "name": "mlpipeline-metrics"
                                    },
                                    {
                                        "configMap": {
                                            "name": "dsp-trusted-ca-pipelines-definition"
                                        },
                                        "name": "custom-ca-bundle"
                                    }
                                ]
                            }
                        },
                        {
                            "name": "run-a-file-3",
                            "runAfter": [
                                "run-a-file-2"
                            ],
                            "taskSpec": {
                                "metadata": {
                                    "annotations": {
                                        "elyra/node-file-name": "3.ipynb",
                                        "elyra/pipeline-source": "ilkdeneme.pipeline",
                                        "pipelines.kubeflow.org/component_spec_digest": "{\"name\": \"Run a file\", \"outputs\": [], \"version\": \"Run a file@sha256=0ce4a78eb4cca1a5fe39551e2320f0f4ded54a44d08c7b22e7d2a610aa01150a\"}",
                                        "pipelines.kubeflow.org/task_display_name": "3"
                                    },
                                    "labels": {
                                        "elyra/experiment-name": "",
                                        "elyra/node-name": "3",
                                        "elyra/node-type": "notebook-script",
                                        "elyra/pipeline-name": "ilkdeneme",
                                        "elyra/pipeline-version": "",
                                        "pipelines.kubeflow.org/cache_enabled": "true"
                                    }
                                },
                                "spec": null,
                                "stepTemplate": {
                                    "computeResources": {},
                                    "volumeMounts": [
                                        {
                                            "mountPath": "/tmp",
                                            "name": "mlpipeline-metrics"
                                        }
                                    ]
                                },
                                "steps": [
                                    {
                                        "args": [
                                            "sh -c \"mkdir -p ./jupyter-work-dir && cd ./jupyter-work-dir\"\nsh -c \"echo 'Downloading file:///opt/app-root/bin/utils/bootstrapper.py' && curl --fail -H 'Cache-Control: no-cache' -L file:///opt/app-root/bin/utils/bootstrapper.py --output bootstrapper.py\"\nsh -c \"echo 'Downloading file:///opt/app-root/bin/utils/requirements-elyra.txt' && curl --fail -H 'Cache-Control: no-cache' -L file:///opt/app-root/bin/utils/requirements-elyra.txt --output requirements-elyra.txt\"\nsh -c \"python3 -m pip install  packaging && python3 -m pip freeze > requirements-current.txt && python3 bootstrapper.py --pipeline-name 'ilkdeneme' --cos-endpoint 'http://minio-service:9000' --cos-bucket 'thy-workshop-pipelines' --cos-directory 'ilkdeneme-0403063248' --cos-dependencies-archive '3-f2ea8439-0336-4233-9b02-c13c5b331444.tar.gz' --file '3.ipynb' \"\n"
                                        ],
                                        "command": [
                                            "sh",
                                            "-c"
                                        ],
                                        "computeResources": {},
                                        "env": [
                                            {
                                                "name": "AWS_ACCESS_KEY_ID",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "AWS_ACCESS_KEY_ID",
                                                        "name": "aws-connection-pipelines"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "AWS_SECRET_ACCESS_KEY",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "AWS_SECRET_ACCESS_KEY",
                                                        "name": "aws-connection-pipelines"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ELYRA_RUNTIME_ENV",
                                                "value": "kfp"
                                            },
                                            {
                                                "name": "ELYRA_ENABLE_PIPELINE_INFO",
                                                "value": "True"
                                            },
                                            {
                                                "name": "ELYRA_WRITABLE_CONTAINER_DIR",
                                                "value": "/tmp"
                                            },
                                            {
                                                "name": "ELYRA_RUN_NAME",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['pipelines.kubeflow.org/run_name']"
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "quay.io/modh/runtime-images@sha256:e0d97147aa6ea050cea12b9759faf4c0e537b043b652cab4ffddc5c2caac23cc",
                                        "imagePullPolicy": "IfNotPresent",
                                        "name": "main"
                                    },
                                    {
                                        "args": [
                                            "#!/usr/bin/env sh\npush_artifact() {\n    workspace_dir=$(echo $(context.taskRun.name) | sed -e \"s/$(context.pipeline.name)-//g\")\n    workspace_dest=/workspace/${workspace_dir}/artifacts/$(context.pipelineRun.name)/$(context.taskRun.name)\n    artifact_name=$(basename $2)\n\n    aws_cp() {\n\n      aws s3 --endpoint http://minio-service.mutatemate-test.svc.cluster.local:9000 --ca-bundle /dsp-custom-certs/dsp-ca.crt cp $1.tgz s3://thy-workshop-pipelines/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz\n\n    }\n\n    if [ -f \"$workspace_dest/$artifact_name\" ]; then\n        echo sending to: ${workspace_dest}/${artifact_name}\n        tar -cvzf $1.tgz -C ${workspace_dest} ${artifact_name}\n        aws_cp $1\n    elif [ -f \"$2\" ]; then\n        tar -cvzf $1.tgz -C $(dirname $2) ${artifact_name}\n        aws_cp $1\n    else\n        echo \"$2 file does not exist. Skip artifact tracking for $1\"\n    fi\n}\npush_log() {\n    cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log > step-main.log\n    push_artifact main-log step-main.log\n}\nstrip_eof() {\n    if [ -f \"$2\" ]; then\n        awk 'NF' $2 | head -c -1 > $1_temp_save && cp $1_temp_save $2\n    fi\n}\npush_artifact \"mlpipeline-metrics\" \"/tmp/mlpipeline-metrics.json\"\npush_artifact \"mlpipeline-ui-metadata\" \"/tmp/mlpipeline-ui-metadata.json\"\nstrip_eof mlpipeline-metrics /tmp/mlpipeline-metrics.json\nstrip_eof mlpipeline-ui-metadata /tmp/mlpipeline-ui-metadata.json\n"
                                        ],
                                        "command": [
                                            "sh",
                                            "-c"
                                        ],
                                        "computeResources": {},
                                        "env": [
                                            {
                                                "name": "ARTIFACT_BUCKET",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['tekton.dev/artifact_bucket']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARTIFACT_ENDPOINT",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['tekton.dev/artifact_endpoint']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARTIFACT_ENDPOINT_SCHEME",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['tekton.dev/artifact_endpoint_scheme']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARTIFACT_ITEMS",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.annotations['tekton.dev/artifact_items']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "PIPELINETASK",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "PIPELINERUN",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "PODNAME",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.name"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "AWS_ACCESS_KEY_ID",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "accesskey",
                                                        "name": "mlpipeline-minio-artifact"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "AWS_SECRET_ACCESS_KEY",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "secretkey",
                                                        "name": "mlpipeline-minio-artifact"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ARCHIVE_LOGS",
                                                "value": "false"
                                            },
                                            {
                                                "name": "TRACK_ARTIFACTS",
                                                "value": "true"
                                            },
                                            {
                                                "name": "STRIP_EOF",
                                                "value": "true"
                                            }
                                        ],
                                        "image": "registry.redhat.io/rhoai/odh-ml-pipelines-artifact-manager-rhel8@sha256:a2bbccc967113670b7b5f62c4b60c583a9cedd0750fde1e14a06e271aa987ede",
                                        "name": "copy-artifacts",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/dsp-custom-certs/dsp-ca.crt",
                                                "name": "custom-ca-bundle",
                                                "subPath": "dsp-ca.crt"
                                            }
                                        ]
                                    }
                                ],
                                "volumes": [
                                    {
                                        "emptyDir": {},
                                        "name": "mlpipeline-metrics"
                                    },
                                    {
                                        "configMap": {
                                            "name": "dsp-trusted-ca-pipelines-definition"
                                        },
                                        "name": "custom-ca-bundle"
                                    }
                                ]
                            }
                        }
                    ]
                },
                "taskRunTemplate": {
                    "serviceAccountName": "pipeline-runner-pipelines-definition"
                },
                "timeouts": {
                    "pipeline": "1h0m0s"
                }
            },
            "status": {}
        },
        "oldObject": null,
        "dryRun": false,
        "options": {
            "kind": "CreateOptions",
            "apiVersion": "meta.k8s.io/v1"
        }
    }
}